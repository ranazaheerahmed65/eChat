<%- include("partials/_header", { title: "Profile" }) %>
    <div class="container-fluid vh-100 d-flex flex-column">
        <div class="row flex-grow-1">
            <!-- Sidebar (Visible on Mobile, Hidden on Large Screens) -->
            <div id="sidebar" class="col-12 col-lg-3 d-none d-lg-block bg-secondary  px-3 pt-3">
                <%- include('partials/_sidebar', { users, token, friendRequests }); %>
            </div>

            <!-- Main Content Area (Hidden on Mobile, Visible on Large Screens) -->
            <div class="col-lg-9 d-lg-block d-flex flex-column bg-light p-0">
                <!-- Header Section -->
                <div class="bg-secondary py-2 px-3 text-white">
                    <h1 class="lead fs-4 fw-bold mb-0">
                        <a class="text-white text-decoration-none px-2" href="/users/select-receiver">
                            <i class="ri-arrow-left-line"></i>
                        </a>
                        Your Profile
                    </h1>
                </div>

                <!-- Instructional Text -->
                <div class="p-3">
                    <p class="lead fs-4">
                    <h3 id="avatarContainer" class="d-flex align-items-end">
                        <img src="/<%= currentUser.avatar_url %>" alt="<%= currentUser.username %>'s avatar"
                            class="img-fluid rounded-circle" width="200px" height="200px">
                        <form action="/users/update-avatar/<%= userId %>" method="POST" id="avatar-form"
                            class="d-flex align-items-center" enctype="multipart/form-data"> <!-- Add this -->
                            <input type="hidden" name="token" value="<%= token %>" class="d-none">
                            <!-- Hidden File Input -->
                            <input type="file" id="avatar-input" name="avatar" accept="image/*" class="d-none">

                            <!-- Edit Button -->
                            <button type="button" id="edit-avatar-button" class="border-0 bg-transparent">
                                <i class="ri-pencil-line"></i>
                            </button>
                            <button type="submit" id="upload-avatar-button"
                                class="d-none btn btn-sm btn-primary">Update</button>
                        </form>
                    </h3>
                    </p>
                    <p class="lead fs-4">
                    <h3 id="nameContainer">
                            <%= currentUser.username %>
                            <button class="border-0 bg-transparent" onclick="editName('<%= userId %>','<%= token %>')">
                                <i class="ri-pencil-line"></i>
                            </button>
                    </h3>
                    </p>

                    <p class="lead m-0">
                        <strong class="m-0">About</strong>
                    </p>
                    <p id="aboutContainer" class="lead" id="about">
                        <%= currentUser.about %>
                            <button class="border-0 bg-transparent" onclick="editAbout('<%= userId %>','<%= token %>')">
                                <i class="ri-pencil-line"></i>
                            </button>
                    </p>
                    <form action="/auth/logout" method="get"
                        onsubmit="return confirmLogout('<%= currentUser.username %>', '<%= userId %>')">
                        <input type="hidden" name="token" value="<%= token %>">
                        <button type="submit" class="btn btn-danger">Logout</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
<script>
    const userId = "<%= userId %>";
    const socket = io({
        query: {
            userId: userId,
            token: "<%= token %>"
        }
    });

    // Handle online/offline events
    socket.on("user_online", (data) => {
        console.log(`User ${data.userId} is now online`);
        // Update UI accordingly
        updateUserStatus(data.userId, true);
    });

    socket.on("user_offline", (data) => {
        console.log(`User ${data.userId} is now offline`);
        // Update UI accordingly
        updateUserStatus(data.userId, false);
    });

    // Function to update UI
    function updateUserStatus(userId, isOnline) {
        // Implement your UI update logic here
        // For example:
        const statusElement = document.querySelector(`.user-status[data-user-id="${userId}"]`);
        if (statusElement) {
            statusElement.textContent = isOnline ? 'Online' : 'Offline';
            statusElement.className = `user-status ${isOnline ? 'online' : 'offline'}`;
        }
    }

    // Handle page/browser close
    window.addEventListener('beforeunload', () => {
        socket.emit("user_disconnect");
    });
</script>
    <script>

        function editAbout(userId, token) {
            const aboutContainer = document.getElementById("aboutContainer");

            if (!aboutContainer) {
                console.error(`Element not found: aboutContainer `);
                return;
            }
            fetch(`/users/edit-about/${userId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
                .then(response => {
                    if (!response.ok) throw new Error('Unauthorized or bad request');
                    return response.text();
                })
                .then(html => {
                    aboutContainer.innerHTML = html;
                })
                .catch(error => console.error('Error fetching edit form:', error));
        }

        function editName(userId, token) {
            const nameContainer = document.getElementById("nameContainer");

            if (!nameContainer) {
                console.error(`Element not found: aboutContainer `);
                return;
            }
            fetch(`/users/edit-name/${userId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
                .then(response => {
                    if (!response.ok) throw new Error('Unauthorized or bad request');
                    return response.text();
                })
                .then(html => {
                    nameContainer.innerHTML = html;
                })
                .catch(error => console.error('Error fetching edit form:', error));
        }

        function editAvatar(userId, token) {
            fetch(`/users/edit-avatar/${userId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
                .then(response => {
                    if (!response.ok) throw new Error('Unauthorized or bad request');
                    return response.text();
                })
                .then(html => {
                    const avatarContainer = document.getElementById('avatarContainer');
                    avatarContainer.innerHTML = html;
                    avatarContainer.style.display = 'block';
                })
                .catch(error => console.error('Error fetching edit form:', error));
        }
        function confirmLogout(name, userId) {
            // Show a confirmation dialog before logout
            if (confirm(`${name}, Are you sure you want to log out?`)) {
                socket.emit("user_disconnect", { userId });
                return true;  // Proceed with logout
            }
            return false;  // Cancel logout
        }

    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {

            const avatarForm = document.getElementById("avatar-form");
            const avatarInput = document.getElementById("avatar-input");
            const editAvatarButton = document.getElementById("edit-avatar-button");
            const uploadAvatarButton = document.getElementById("upload-avatar-button");

            // When edit button is clicked, trigger file selection
            editAvatarButton.addEventListener("click", () => {
                avatarInput.click();
            });

            // Show the upload button when a file is selected
            avatarInput.addEventListener("change", () => {
                if (avatarInput.files.length > 0) {
                    uploadAvatarButton.classList.remove("d-none");
                    editAvatarButton.classList.add("d-none");
                } else {
                    uploadAvatarButton.classList.add("d-none");
                    editAvatarButton.classList.remove("d-none");
                }
            });
            avatarForm.addEventListener("submit", async (event) => {
                event.preventDefault();
                const avatar = avatarInput.files[0];

                if (!avatar) {
                    alert("Please select an image for your profile.");
                    return;
                }

                const formData = new FormData();
                formData.append("avatar", avatar); // Ensure "avatar" matches the name in Multer
                formData.append("token", "<%= token %>");

                try {
                    const response = await fetch(`/users/update-avatar/<%= userId %>`, {
                        method: "POST",
                        body: formData, // No need for headers; the browser sets them automatically
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            window.location.reload();
                        } else {
                            alert("Error updating avatar.");
                        }
                    } else {
                        alert("Error updating avatar.");
                    }
                } catch (error) {
                    console.error("Error updating avatar:", error);
                    alert("Error updating avatar.");
                }
            });
        });
    </script>

    <%- include('partials/_footer') %>